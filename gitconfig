[alias]
    # branch
    b  = branch
    bc = checkout -b
    bl = branch -v
    bL = branch -av
    bx = branch -d
    bX = branch -D
    bm = branch -m
    bM = branch -M
    bs = show-branch
    bS = show-branch -a
    branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
    new-feature = "!f() { git co develop && git pull && git co -b feature/$1; }; f"
    #changelog = "!f() {  git log $(git describe --abbrev=0 --tags).. --merges --pretty=format:\"* %b\" | grep -E \"^[A-Z]+\-[0-9]+\" }; f" 
    # checkout/fetch/merge/push/rebase
    # checkout
    co  = checkout
    co0 = checkout HEAD --
    # fetch
    f   = fetch
    fm  = pull
    fo  = fetch origin
    # merge
    m   = merge
    mom = merge origin/master
    # push
    p   = push
    pa  = push --all
    pt  = push --tags
    # rebase
    r   = rebase
    ra  = rebase --abort
    rc  = rebase --continue
    ri  = rebase --interactive
    rs  = rebase --skip
    rom = rebase origin/master

    # commit
    c      = commit -v
    ca     = commit --all -v
    cm     = commit --message
    cam    = commit --all --message
    camend = commit --amend --reuse-message HEAD
    cundo  = reset --soft "HEAD^"
    cp     = cherry-pick

    # diff
    d    = diff          # Diff working dir to index
    ds   = diff --staged # Diff index to HEAD
    dc   = diff --staged # Diff index to HEAD
    dh   = diff HEAD     # Diff working dir and index to HEAD
    hub  = browse
    hubd = compare

    # index
    s  = status
    a  = add
    ia = add
    ir = reset

    # log
    l   = log --topo-order --pretty=format:'%C(yellow)%h %C(cyan)%cn %C(blue)%cr%C(reset) %s'
    ls  = log --topo-order --stat --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    ld  = log --topo-order --stat --patch --full-diff --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    lg  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lga = log --topo-order --all --graph --pretty=format:'%C(yellow)%h %C(cyan)%cn%C(reset) %s %C(red)%d%C(reset)%n'
    lm  = log --topo-order --pretty=format:'%s'
    lh  = shortlog --summary --numbered
    llf = fsck --lost-found

    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all

    # remote
    re  = remote
    rel = remote --verbose
    rea = remote add
    rex = remote rm
    rem = remote rename
	create-pull-request = !sh -c 'stash pull-request $0 $@'

[push]
  default = simple
	autoSetupRemote = true
[core]
  attributesfile = ~/.gitattributes
  excludesfile = ~/.gitignore
	autocrlf = input
  # insanely beautiful diffs
  pager = zsh -lc 'diff-highlight | strip_diff_leading_symbols | less -r' -
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[color "diff-highlight"]
    oldNormal = "red bold"
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"
[merge "pofile"]
  name = custom merge driver for gettext po files
  driver = git-po-merge %A %O %B
[include]
  path = ~/.gitconfig.local
[user]
	name = Andries Seutens
	email = andries@egeniq.com
[init]
	defaultBranch = develop
